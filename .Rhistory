dataPath<-"C:/Users/Santosh Selvaraj/Documents/MSCA/2. Statistical Analysis/Lecture 2"
dat <- read.table(paste(dataPath,'Week2_Test_Sample.csv',sep = '/'), header=TRUE)
View(dat)
dat$x[4:503]
#Importing the file in R
dataPath<-"C:/Users/Santosh Selvaraj/Documents/MSCA/2. Statistical Analysis/Lecture 2"
dat <- read.table(paste(dataPath,'Week2_Test_Sample.csv',sep = '/'), header=TRUE)
#Defining Normal Distribution parameters
NMean = dat$x[1]
Nsd = dat$x[2]
#Defining Exponential parameters
Elambda = dat$x[3]
#Extracting sample distributions
dat = dat$x[4:503]
summary(dat)
plot(dat$x, 1:nrow(dat))
dat$x
plot(dat, 1:nrow(dat))
plot(dat, 1:length(dat))
plot(1:length(dat), dat)
#Importing the file in R
dataPath<-"C:/Users/Santosh Selvaraj/Documents/MSCA/2. Statistical Analysis/Lecture 2"
dat <- read.table(paste(dataPath,'Week2_Test_Sample.csv',sep = '/'), header=TRUE)
#Defining Normal Distribution parameters
NMean = dat$x[1]
Nsd = dat$x[2]
#Defining Exponential parameters
Elambda = dat$x[3]
#Extracting sample distributions
dat = dat$x[4:503]
#plot(1:length(dat), dat)
#Generating random numbers using qnorm and qexp
datNorm = qnorm(p = dat, mean = NMean, sd = Nsd)
datExp = qexp(p = dat, rate = Elambda)
#Combining the outputs
res<-cbind(datNorm=datNorm,datExp=datExp)
View(res)
#Write table output
write.table(res, file = paste(dataPath,'result.csv',sep = '/'), row.names = F)
#Importing the file in R
dataPath<-"C:/Users/Santosh Selvaraj/Documents/MSCA/2. Statistical Analysis/Lecture 2"
dat <- read.table(paste(dataPath,'Week2_Test_Sample.csv',sep = '/'), header=TRUE)
#Defining Normal Distribution parameters
NMean = dat$x[1]
Nsd = dat$x[2]
#Defining Exponential parameters
Elambda = dat$x[3]
#Extracting sample distributions
dat = dat$x[4:503]
#plot(1:length(dat), dat)
#Generating random numbers using qnorm and qexp
datNorm = qnorm(p = dat, mean = NMean, sd = Nsd)
datExp = qexp(p = dat, rate = Elambda)
#Combining the outputs
res<-cbind(datNorm=datNorm,datExp=datExp)
#Write table output
write.table(res, file = paste(dataPath,'result.csv',sep = '/'), row.names = F)
hist(datNorm)
plot(1:length(dat), dat)
plot(1:length(dat), dat, xlab = "Index", ylab = "Random Numbers")
hist(dat)
hist(datNorm)
hist(datexp)
hist(datExp)
plot(1:length(dat), dat, xlab = "Index", ylab = "Random Numbers")
1 - pbinom(34,100,0.3)
1 - pbinom(34,100,log(0.3),log.p = TRUE)
x =binom(1000,100,0.5)
x = rbinom(1000,100,0.5)
x[1:10]
x = rbinom(1,100,0.5)
x[1:10]
x = rbinom(1000,100,0.5)
hist(x)
x = rbinom(1,100,0.5)
x
dbinom(100,100,0.5)
dbinom(50,100,0.5)
dbinom(35,100,0.3)
x = dbinom(c(1:100),100,0.3)
x = dbinom(c(0:100),100,0.3)
hist(x)
plot(x,0:100)
plot(0:100,x)
1 - pbinom(34,100,0.3)
sum(x[x>=35])
sum(x[35:])
sum(x[35:100])
sum(x[34:100])
sum(x[35:100])
x = dbinom(30,100,0.3)
x = dgeom(1:100,0.5)
x = dgeom(0:100,0.5)
plot(0:100,x)
plot(0:100,x, xlim = c(0,10))
pexp(5,0.1)
dexp(5,0.1)
pexp(5,0.1) - dexp(5,0.1)
1-exp(-0.5)
dexp(5,0.1)
pexp(5.5,0.1) - pexp(4.5,0.1)
pexp(5,0.1) -
dexp(5,0.1)
dexp(5,0.1)
install.packages("esquisse")
library(esquisse)
dat = iris
View(dat)
esquisse::esquisser()
A = matrix(c(2,3,1,-2,3,-2,1,-1,4), ncol = 3, byrow = TRUE)
A
solve(A)
b = matrix(c(12,1,16), ncol = 1)
b
solve(A,b)
library(tidyverse)
library(ggplot2)
library(mice)
library(caTools)
library(scales)
library(caret)
#IMPORT DATASETS
training_set = read.csv("train.csv")
test_set = read.csv("test.csv")
PassengerId = test_set$PassengerId
#PRE-PROCESSING
#Data Cleaning and manipulation
training_set = training_set %>%
mutate(Embarked = ifelse(Embarked=="","S",as.character(Embarked)),
Family = SibSp + Parch) %>%
mutate_at(vars(Survived, Pclass,Embarked), factor) %>%
select(-c(Name,Ticket,Cabin,PassengerId,SibSp,Parch))
test_set = test_set %>%
mutate_at(vars(Pclass), factor) %>%
mutate(Fare = ifelse(is.na(Fare), median(Fare,na.rm = T), Fare),
Family = SibSp + Parch) %>%
select(-c(Name,Ticket,Cabin,PassengerId, SibSp, Parch))
#############################################################################
#MISSING VALUE TREATMENT
#Impute missing values using MICE library
#Identify the missing values#md.pattern(training_set)
set.seed(100)
imputeTraining = mice(data = training_set, method = "pmm", m = 5, maxit = 50, seed = 500)
set.seed(100)
imputeTest = mice(data = test_set, method = "pmm", m = 5, maxit = 50, seed = 500)
#Check the imputed values #training_imputed$imp$Age
training_set = complete(imputeTraining,1)
test_set = complete(imputeTest,1)
########################################################################################
#EXPLORATORY DATA ANALYSIS
#Passenger Class
training_set %>% ggplot(aes(x=Survived)) +
geom_bar(aes(fill=Pclass),position = "fill",width=0.5) +
ggtitle("Survived ~ Passenger Class") +
xlab("Survived") +
ylab("% of Passengers") +
scale_y_continuous(labels = percent_format()) +
scale_fill_manual(values = c("steelblue3","turquoise3","royalblue3"),
name ="Passenger\nClass",
breaks = c(1,2,3),
labels = c("Upper","Middle","Lower")) +
theme_classic()
setwd("~/R Working Directory/Data Science Projects/Titanic")
training_set = read.csv("train.csv")
test_set = read.csv("test.csv")
PassengerId = test_set$PassengerId
#PRE-PROCESSING
#Data Cleaning and manipulation
training_set = training_set %>%
mutate(Embarked = ifelse(Embarked=="","S",as.character(Embarked)),
Family = SibSp + Parch) %>%
mutate_at(vars(Survived, Pclass,Embarked), factor) %>%
select(-c(Name,Ticket,Cabin,PassengerId,SibSp,Parch))
test_set = test_set %>%
mutate_at(vars(Pclass), factor) %>%
mutate(Fare = ifelse(is.na(Fare), median(Fare,na.rm = T), Fare),
Family = SibSp + Parch) %>%
select(-c(Name,Ticket,Cabin,PassengerId, SibSp, Parch))
#############################################################################
#MISSING VALUE TREATMENT
#Impute missing values using MICE library
#Identify the missing values#md.pattern(training_set)
set.seed(100)
imputeTraining = mice(data = training_set, method = "pmm", m = 5, maxit = 50, seed = 500)
set.seed(100)
imputeTest = mice(data = test_set, method = "pmm", m = 5, maxit = 50, seed = 500)
#Check the imputed values #training_imputed$imp$Age
training_set = complete(imputeTraining,1)
test_set = complete(imputeTest,1)
########################################################################################
#EXPLORATORY DATA ANALYSIS
#Passenger Class
training_set %>% ggplot(aes(x=Survived)) +
geom_bar(aes(fill=Pclass),position = "fill",width=0.5) +
ggtitle("Survived ~ Passenger Class") +
xlab("Survived") +
ylab("% of Passengers") +
scale_y_continuous(labels = percent_format()) +
scale_fill_manual(values = c("steelblue3","turquoise3","royalblue3"),
name ="Passenger\nClass",
breaks = c(1,2,3),
labels = c("Upper","Middle","Lower")) +
theme_classic()
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
model.rfe <- rfe(training_set[,c(3,2,4,7)], training_set[,1],
sizes=c(1:6), rfeControl=control)
print(model.rfe)
predictors(model.rfe)
plot(model.rfe, type=c("g","o"))
